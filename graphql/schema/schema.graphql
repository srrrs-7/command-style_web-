# validation
directive @validation(format: String) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

# all data has unique id
interface Node {
    id: ID!
}

enum SortBy {
    ASC
    DESC
}

scalar Time
scalar UUID
scalar Byte

# admin user
type adminUser implements Node {
    id: ID!
    username: String!
    password: String!
}
type adminUserResponse implements Node {
    id: ID!
    is_username: Boolean!
    is_password: Boolean!
}
extend type Mutation {
    createAdminUser(username: String!, password: String!): MutationResponse!
    getAdminUser(username: String!, password: String!): adminUserResponse!
}

# codes
type Code implements Node {
    id: ID!
    username: String!
    code: String!
    img: Byte!
    description: String!
    performance: String!
    star: [Int!]!
    tags: [String!]!
    created_at: Time!
    updated_at: Time!
    access: Int!
    user_id: Int!
}
extend type Query {
    getAllCodes(limit: Int!, skip: Int!): [Code!]!
    GetAllCodesByKeyword(keyword: String!, limit: Int!, skip: Int!): [Code!]!
    GetAllCodesSortedStar(limit: Int!, skip: Int!): [Code!]!
    GetAllCodesSortedAccess(limit: Int!, skip: Int!): [Code!]!
    getAllCodesByTag(tags: [String]!, sortBy: SortBy!, limit: Int!, skip: Int!): [Code!]!
    getAllOwnCodes(limit: Int!, skip: Int!): [Code!]!
    getCode(id: Int!): Code!
}
extend type Mutation {
    adminCreateCode(
        username: String!
        code: String!
        img: Byte!
        description: String!
        performance: String!
        star: [Int!]!
        tags: [String!]!
        access: Int!
    ): MutationResponse!
    createCode(
        code: String!
        img: Byte!
        description: String!
        performance: String!
        star: [Int!]!
        tags: [String!]!
        access: Int!
    ): MutationResponse!
    updateCodes(id: Int!, code: String!, img: Byte!, description: String!, performance: String!, tags: [String!]!): MutationResponse!
    updateStar(code_id: Int!): MutationResponse!
    updateAccess(id: Int!, access: Int!): MutationResponse!
    deleteCode(id: Int!): MutationResponse!
}

# collection
type Collection implements Node {
    id: ID!
    user_id: Int!
    code_id: Int!
}
type Code_with_CollectionId implements Node {
    id: ID!
    username: String!
    code: String!
    img: Byte!
    description: String!
    performance: String!
    star: [Int!]!
    tags: [String!]!
    created_at: Time!
    updated_at: Time!
    access: Int!
    collection_id: Int!
    user_id: Int!
}
extend type Query {
    getAllCollection(limit: Int!, skip: Int!): [Code_with_CollectionId!]!
    getAllCollectionBySearch(keyword: String!, limit: Int!, skip: Int!): [Code_with_CollectionId!]!
}
extend type Mutation {
    createCollection(code_id: Int!): MutationResponse!
    createAdminCollection(user_id: Int!, code_id: Int!): MutationResponse!
    getCollection(id: Int!): Code_with_CollectionId!
    deleteCollection(id: Int!): MutationResponse!
}

# media
type Media implements Node {
    id: ID!
    title: String!
    contents: String!
    img: Byte!
    created_at: Time!
    updated_at: Time!
}
extend type Query {
    getAllMedia(limit: Int!, skip: Int!): [Media]!
}
extend type Mutation {
    updateMedia(id: ID!, title: String!, contents: String!, img: Byte!): MutationResponse!
    createMedia(title: String!, contents: String!, img: Byte!): MutationResponse!
    getMedia(id: Int!): Media!
    deleteMedia(id: Int!): MutationResponse!
}

# users
type User implements Node {
    id: ID!
    username: String!
    password: String!
    email: String!
    sex: String!
    date_of_birth: String!
    created_at: Time!
    updated_at: Time!
}
type LoginUserResponse implements Node {
    id: ID!
    user_id: Int!
    username: String!
    OK: Boolean!
}
extend type Mutation {
    createUser(username: String!, password: String!, email: String!, sex: String!, date_of_birth: String!): MutationResponse!
    updateUser(username: String!, updateName: String!, email: String!): MutationResponse!
    loginUser(username: String!, password: String!): LoginUserResponse!
    deleteUser(username: String!): MutationResponse!
}

# token
extend type Mutation {
    createToken(username: String!): String!
    createAdminToken(username: String!, password: String!): String!
}

type MutationResponse implements Node {
    id: ID!
    is_error: Boolean!
    message: String!
}
